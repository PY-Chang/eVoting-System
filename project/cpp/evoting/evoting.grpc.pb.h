// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: evoting.proto
#ifndef GRPC_evoting_2eproto__INCLUDED
#define GRPC_evoting_2eproto__INCLUDED

#include "evoting.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace voting {

// B. RPC APIs
class eVoting final {
 public:
  static constexpr char const* service_full_name() {
    return "voting.eVoting";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PreAuth(::grpc::ClientContext* context, const ::voting::VoterName& request, ::voting::Challenge* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::Challenge>> AsyncPreAuth(::grpc::ClientContext* context, const ::voting::VoterName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::Challenge>>(AsyncPreAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::Challenge>> PrepareAsyncPreAuth(::grpc::ClientContext* context, const ::voting::VoterName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::Challenge>>(PrepareAsyncPreAuthRaw(context, request, cq));
    }
    virtual ::grpc::Status Auth(::grpc::ClientContext* context, const ::voting::AuthRequest& request, ::voting::AuthToken* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::AuthToken>> AsyncAuth(::grpc::ClientContext* context, const ::voting::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::AuthToken>>(AsyncAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::AuthToken>> PrepareAsyncAuth(::grpc::ClientContext* context, const ::voting::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::AuthToken>>(PrepareAsyncAuthRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateElection(::grpc::ClientContext* context, const ::voting::Election& request, ::voting::ElectionStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::ElectionStatus>> AsyncCreateElection(::grpc::ClientContext* context, const ::voting::Election& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::ElectionStatus>>(AsyncCreateElectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::ElectionStatus>> PrepareAsyncCreateElection(::grpc::ClientContext* context, const ::voting::Election& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::ElectionStatus>>(PrepareAsyncCreateElectionRaw(context, request, cq));
    }
    virtual ::grpc::Status CastVote(::grpc::ClientContext* context, const ::voting::Vote& request, ::voting::VoteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::VoteStatus>> AsyncCastVote(::grpc::ClientContext* context, const ::voting::Vote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::VoteStatus>>(AsyncCastVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::VoteStatus>> PrepareAsyncCastVote(::grpc::ClientContext* context, const ::voting::Vote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::VoteStatus>>(PrepareAsyncCastVoteRaw(context, request, cq));
    }
    virtual ::grpc::Status GetResult(::grpc::ClientContext* context, const ::voting::ElectionName& request, ::voting::ElectionResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::ElectionResult>> AsyncGetResult(::grpc::ClientContext* context, const ::voting::ElectionName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::ElectionResult>>(AsyncGetResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::ElectionResult>> PrepareAsyncGetResult(::grpc::ClientContext* context, const ::voting::ElectionName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::voting::ElectionResult>>(PrepareAsyncGetResultRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void PreAuth(::grpc::ClientContext* context, const ::voting::VoterName* request, ::voting::Challenge* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PreAuth(::grpc::ClientContext* context, const ::voting::VoterName* request, ::voting::Challenge* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Auth(::grpc::ClientContext* context, const ::voting::AuthRequest* request, ::voting::AuthToken* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Auth(::grpc::ClientContext* context, const ::voting::AuthRequest* request, ::voting::AuthToken* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateElection(::grpc::ClientContext* context, const ::voting::Election* request, ::voting::ElectionStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateElection(::grpc::ClientContext* context, const ::voting::Election* request, ::voting::ElectionStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CastVote(::grpc::ClientContext* context, const ::voting::Vote* request, ::voting::VoteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CastVote(::grpc::ClientContext* context, const ::voting::Vote* request, ::voting::VoteStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetResult(::grpc::ClientContext* context, const ::voting::ElectionName* request, ::voting::ElectionResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetResult(::grpc::ClientContext* context, const ::voting::ElectionName* request, ::voting::ElectionResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::voting::Challenge>* AsyncPreAuthRaw(::grpc::ClientContext* context, const ::voting::VoterName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::voting::Challenge>* PrepareAsyncPreAuthRaw(::grpc::ClientContext* context, const ::voting::VoterName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::voting::AuthToken>* AsyncAuthRaw(::grpc::ClientContext* context, const ::voting::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::voting::AuthToken>* PrepareAsyncAuthRaw(::grpc::ClientContext* context, const ::voting::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::voting::ElectionStatus>* AsyncCreateElectionRaw(::grpc::ClientContext* context, const ::voting::Election& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::voting::ElectionStatus>* PrepareAsyncCreateElectionRaw(::grpc::ClientContext* context, const ::voting::Election& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::voting::VoteStatus>* AsyncCastVoteRaw(::grpc::ClientContext* context, const ::voting::Vote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::voting::VoteStatus>* PrepareAsyncCastVoteRaw(::grpc::ClientContext* context, const ::voting::Vote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::voting::ElectionResult>* AsyncGetResultRaw(::grpc::ClientContext* context, const ::voting::ElectionName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::voting::ElectionResult>* PrepareAsyncGetResultRaw(::grpc::ClientContext* context, const ::voting::ElectionName& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PreAuth(::grpc::ClientContext* context, const ::voting::VoterName& request, ::voting::Challenge* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::Challenge>> AsyncPreAuth(::grpc::ClientContext* context, const ::voting::VoterName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::Challenge>>(AsyncPreAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::Challenge>> PrepareAsyncPreAuth(::grpc::ClientContext* context, const ::voting::VoterName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::Challenge>>(PrepareAsyncPreAuthRaw(context, request, cq));
    }
    ::grpc::Status Auth(::grpc::ClientContext* context, const ::voting::AuthRequest& request, ::voting::AuthToken* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::AuthToken>> AsyncAuth(::grpc::ClientContext* context, const ::voting::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::AuthToken>>(AsyncAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::AuthToken>> PrepareAsyncAuth(::grpc::ClientContext* context, const ::voting::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::AuthToken>>(PrepareAsyncAuthRaw(context, request, cq));
    }
    ::grpc::Status CreateElection(::grpc::ClientContext* context, const ::voting::Election& request, ::voting::ElectionStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::ElectionStatus>> AsyncCreateElection(::grpc::ClientContext* context, const ::voting::Election& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::ElectionStatus>>(AsyncCreateElectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::ElectionStatus>> PrepareAsyncCreateElection(::grpc::ClientContext* context, const ::voting::Election& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::ElectionStatus>>(PrepareAsyncCreateElectionRaw(context, request, cq));
    }
    ::grpc::Status CastVote(::grpc::ClientContext* context, const ::voting::Vote& request, ::voting::VoteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::VoteStatus>> AsyncCastVote(::grpc::ClientContext* context, const ::voting::Vote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::VoteStatus>>(AsyncCastVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::VoteStatus>> PrepareAsyncCastVote(::grpc::ClientContext* context, const ::voting::Vote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::VoteStatus>>(PrepareAsyncCastVoteRaw(context, request, cq));
    }
    ::grpc::Status GetResult(::grpc::ClientContext* context, const ::voting::ElectionName& request, ::voting::ElectionResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::ElectionResult>> AsyncGetResult(::grpc::ClientContext* context, const ::voting::ElectionName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::ElectionResult>>(AsyncGetResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::ElectionResult>> PrepareAsyncGetResult(::grpc::ClientContext* context, const ::voting::ElectionName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::voting::ElectionResult>>(PrepareAsyncGetResultRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PreAuth(::grpc::ClientContext* context, const ::voting::VoterName* request, ::voting::Challenge* response, std::function<void(::grpc::Status)>) override;
      void PreAuth(::grpc::ClientContext* context, const ::voting::VoterName* request, ::voting::Challenge* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Auth(::grpc::ClientContext* context, const ::voting::AuthRequest* request, ::voting::AuthToken* response, std::function<void(::grpc::Status)>) override;
      void Auth(::grpc::ClientContext* context, const ::voting::AuthRequest* request, ::voting::AuthToken* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateElection(::grpc::ClientContext* context, const ::voting::Election* request, ::voting::ElectionStatus* response, std::function<void(::grpc::Status)>) override;
      void CreateElection(::grpc::ClientContext* context, const ::voting::Election* request, ::voting::ElectionStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CastVote(::grpc::ClientContext* context, const ::voting::Vote* request, ::voting::VoteStatus* response, std::function<void(::grpc::Status)>) override;
      void CastVote(::grpc::ClientContext* context, const ::voting::Vote* request, ::voting::VoteStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetResult(::grpc::ClientContext* context, const ::voting::ElectionName* request, ::voting::ElectionResult* response, std::function<void(::grpc::Status)>) override;
      void GetResult(::grpc::ClientContext* context, const ::voting::ElectionName* request, ::voting::ElectionResult* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::voting::Challenge>* AsyncPreAuthRaw(::grpc::ClientContext* context, const ::voting::VoterName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::voting::Challenge>* PrepareAsyncPreAuthRaw(::grpc::ClientContext* context, const ::voting::VoterName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::voting::AuthToken>* AsyncAuthRaw(::grpc::ClientContext* context, const ::voting::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::voting::AuthToken>* PrepareAsyncAuthRaw(::grpc::ClientContext* context, const ::voting::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::voting::ElectionStatus>* AsyncCreateElectionRaw(::grpc::ClientContext* context, const ::voting::Election& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::voting::ElectionStatus>* PrepareAsyncCreateElectionRaw(::grpc::ClientContext* context, const ::voting::Election& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::voting::VoteStatus>* AsyncCastVoteRaw(::grpc::ClientContext* context, const ::voting::Vote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::voting::VoteStatus>* PrepareAsyncCastVoteRaw(::grpc::ClientContext* context, const ::voting::Vote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::voting::ElectionResult>* AsyncGetResultRaw(::grpc::ClientContext* context, const ::voting::ElectionName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::voting::ElectionResult>* PrepareAsyncGetResultRaw(::grpc::ClientContext* context, const ::voting::ElectionName& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PreAuth_;
    const ::grpc::internal::RpcMethod rpcmethod_Auth_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateElection_;
    const ::grpc::internal::RpcMethod rpcmethod_CastVote_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PreAuth(::grpc::ServerContext* context, const ::voting::VoterName* request, ::voting::Challenge* response);
    virtual ::grpc::Status Auth(::grpc::ServerContext* context, const ::voting::AuthRequest* request, ::voting::AuthToken* response);
    virtual ::grpc::Status CreateElection(::grpc::ServerContext* context, const ::voting::Election* request, ::voting::ElectionStatus* response);
    virtual ::grpc::Status CastVote(::grpc::ServerContext* context, const ::voting::Vote* request, ::voting::VoteStatus* response);
    virtual ::grpc::Status GetResult(::grpc::ServerContext* context, const ::voting::ElectionName* request, ::voting::ElectionResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PreAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PreAuth() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PreAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreAuth(::grpc::ServerContext* /*context*/, const ::voting::VoterName* /*request*/, ::voting::Challenge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPreAuth(::grpc::ServerContext* context, ::voting::VoterName* request, ::grpc::ServerAsyncResponseWriter< ::voting::Challenge>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Auth() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Auth(::grpc::ServerContext* /*context*/, const ::voting::AuthRequest* /*request*/, ::voting::AuthToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuth(::grpc::ServerContext* context, ::voting::AuthRequest* request, ::grpc::ServerAsyncResponseWriter< ::voting::AuthToken>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateElection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateElection() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateElection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateElection(::grpc::ServerContext* /*context*/, const ::voting::Election* /*request*/, ::voting::ElectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateElection(::grpc::ServerContext* context, ::voting::Election* request, ::grpc::ServerAsyncResponseWriter< ::voting::ElectionStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CastVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CastVote() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CastVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastVote(::grpc::ServerContext* /*context*/, const ::voting::Vote* /*request*/, ::voting::VoteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCastVote(::grpc::ServerContext* context, ::voting::Vote* request, ::grpc::ServerAsyncResponseWriter< ::voting::VoteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResult() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResult(::grpc::ServerContext* /*context*/, const ::voting::ElectionName* /*request*/, ::voting::ElectionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResult(::grpc::ServerContext* context, ::voting::ElectionName* request, ::grpc::ServerAsyncResponseWriter< ::voting::ElectionResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PreAuth<WithAsyncMethod_Auth<WithAsyncMethod_CreateElection<WithAsyncMethod_CastVote<WithAsyncMethod_GetResult<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PreAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PreAuth() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::voting::VoterName, ::voting::Challenge>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::voting::VoterName* request, ::voting::Challenge* response) { return this->PreAuth(context, request, response); }));}
    void SetMessageAllocatorFor_PreAuth(
        ::grpc::MessageAllocator< ::voting::VoterName, ::voting::Challenge>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::voting::VoterName, ::voting::Challenge>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PreAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreAuth(::grpc::ServerContext* /*context*/, const ::voting::VoterName* /*request*/, ::voting::Challenge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PreAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::voting::VoterName* /*request*/, ::voting::Challenge* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Auth() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::voting::AuthRequest, ::voting::AuthToken>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::voting::AuthRequest* request, ::voting::AuthToken* response) { return this->Auth(context, request, response); }));}
    void SetMessageAllocatorFor_Auth(
        ::grpc::MessageAllocator< ::voting::AuthRequest, ::voting::AuthToken>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::voting::AuthRequest, ::voting::AuthToken>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Auth(::grpc::ServerContext* /*context*/, const ::voting::AuthRequest* /*request*/, ::voting::AuthToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Auth(
      ::grpc::CallbackServerContext* /*context*/, const ::voting::AuthRequest* /*request*/, ::voting::AuthToken* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateElection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateElection() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::voting::Election, ::voting::ElectionStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::voting::Election* request, ::voting::ElectionStatus* response) { return this->CreateElection(context, request, response); }));}
    void SetMessageAllocatorFor_CreateElection(
        ::grpc::MessageAllocator< ::voting::Election, ::voting::ElectionStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::voting::Election, ::voting::ElectionStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateElection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateElection(::grpc::ServerContext* /*context*/, const ::voting::Election* /*request*/, ::voting::ElectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateElection(
      ::grpc::CallbackServerContext* /*context*/, const ::voting::Election* /*request*/, ::voting::ElectionStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CastVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CastVote() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::voting::Vote, ::voting::VoteStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::voting::Vote* request, ::voting::VoteStatus* response) { return this->CastVote(context, request, response); }));}
    void SetMessageAllocatorFor_CastVote(
        ::grpc::MessageAllocator< ::voting::Vote, ::voting::VoteStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::voting::Vote, ::voting::VoteStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CastVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastVote(::grpc::ServerContext* /*context*/, const ::voting::Vote* /*request*/, ::voting::VoteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CastVote(
      ::grpc::CallbackServerContext* /*context*/, const ::voting::Vote* /*request*/, ::voting::VoteStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResult() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::voting::ElectionName, ::voting::ElectionResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::voting::ElectionName* request, ::voting::ElectionResult* response) { return this->GetResult(context, request, response); }));}
    void SetMessageAllocatorFor_GetResult(
        ::grpc::MessageAllocator< ::voting::ElectionName, ::voting::ElectionResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::voting::ElectionName, ::voting::ElectionResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResult(::grpc::ServerContext* /*context*/, const ::voting::ElectionName* /*request*/, ::voting::ElectionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResult(
      ::grpc::CallbackServerContext* /*context*/, const ::voting::ElectionName* /*request*/, ::voting::ElectionResult* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PreAuth<WithCallbackMethod_Auth<WithCallbackMethod_CreateElection<WithCallbackMethod_CastVote<WithCallbackMethod_GetResult<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PreAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PreAuth() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PreAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreAuth(::grpc::ServerContext* /*context*/, const ::voting::VoterName* /*request*/, ::voting::Challenge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Auth() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Auth(::grpc::ServerContext* /*context*/, const ::voting::AuthRequest* /*request*/, ::voting::AuthToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateElection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateElection() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateElection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateElection(::grpc::ServerContext* /*context*/, const ::voting::Election* /*request*/, ::voting::ElectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CastVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CastVote() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CastVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastVote(::grpc::ServerContext* /*context*/, const ::voting::Vote* /*request*/, ::voting::VoteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResult() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResult(::grpc::ServerContext* /*context*/, const ::voting::ElectionName* /*request*/, ::voting::ElectionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PreAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PreAuth() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PreAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreAuth(::grpc::ServerContext* /*context*/, const ::voting::VoterName* /*request*/, ::voting::Challenge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPreAuth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Auth() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Auth(::grpc::ServerContext* /*context*/, const ::voting::AuthRequest* /*request*/, ::voting::AuthToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateElection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateElection() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateElection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateElection(::grpc::ServerContext* /*context*/, const ::voting::Election* /*request*/, ::voting::ElectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateElection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CastVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CastVote() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CastVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastVote(::grpc::ServerContext* /*context*/, const ::voting::Vote* /*request*/, ::voting::VoteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCastVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResult() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResult(::grpc::ServerContext* /*context*/, const ::voting::ElectionName* /*request*/, ::voting::ElectionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PreAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PreAuth() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PreAuth(context, request, response); }));
    }
    ~WithRawCallbackMethod_PreAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreAuth(::grpc::ServerContext* /*context*/, const ::voting::VoterName* /*request*/, ::voting::Challenge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PreAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Auth() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Auth(context, request, response); }));
    }
    ~WithRawCallbackMethod_Auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Auth(::grpc::ServerContext* /*context*/, const ::voting::AuthRequest* /*request*/, ::voting::AuthToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Auth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateElection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateElection() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateElection(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateElection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateElection(::grpc::ServerContext* /*context*/, const ::voting::Election* /*request*/, ::voting::ElectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateElection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CastVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CastVote() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CastVote(context, request, response); }));
    }
    ~WithRawCallbackMethod_CastVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CastVote(::grpc::ServerContext* /*context*/, const ::voting::Vote* /*request*/, ::voting::VoteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CastVote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResult() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetResult(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResult(::grpc::ServerContext* /*context*/, const ::voting::ElectionName* /*request*/, ::voting::ElectionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PreAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PreAuth() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::voting::VoterName, ::voting::Challenge>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::voting::VoterName, ::voting::Challenge>* streamer) {
                       return this->StreamedPreAuth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PreAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PreAuth(::grpc::ServerContext* /*context*/, const ::voting::VoterName* /*request*/, ::voting::Challenge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPreAuth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::voting::VoterName,::voting::Challenge>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Auth() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::voting::AuthRequest, ::voting::AuthToken>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::voting::AuthRequest, ::voting::AuthToken>* streamer) {
                       return this->StreamedAuth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Auth(::grpc::ServerContext* /*context*/, const ::voting::AuthRequest* /*request*/, ::voting::AuthToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::voting::AuthRequest,::voting::AuthToken>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateElection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateElection() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::voting::Election, ::voting::ElectionStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::voting::Election, ::voting::ElectionStatus>* streamer) {
                       return this->StreamedCreateElection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateElection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateElection(::grpc::ServerContext* /*context*/, const ::voting::Election* /*request*/, ::voting::ElectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateElection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::voting::Election,::voting::ElectionStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CastVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CastVote() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::voting::Vote, ::voting::VoteStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::voting::Vote, ::voting::VoteStatus>* streamer) {
                       return this->StreamedCastVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CastVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CastVote(::grpc::ServerContext* /*context*/, const ::voting::Vote* /*request*/, ::voting::VoteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCastVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::voting::Vote,::voting::VoteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetResult() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::voting::ElectionName, ::voting::ElectionResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::voting::ElectionName, ::voting::ElectionResult>* streamer) {
                       return this->StreamedGetResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResult(::grpc::ServerContext* /*context*/, const ::voting::ElectionName* /*request*/, ::voting::ElectionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::voting::ElectionName,::voting::ElectionResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PreAuth<WithStreamedUnaryMethod_Auth<WithStreamedUnaryMethod_CreateElection<WithStreamedUnaryMethod_CastVote<WithStreamedUnaryMethod_GetResult<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PreAuth<WithStreamedUnaryMethod_Auth<WithStreamedUnaryMethod_CreateElection<WithStreamedUnaryMethod_CastVote<WithStreamedUnaryMethod_GetResult<Service > > > > > StreamedService;
};

}  // namespace voting


#endif  // GRPC_evoting_2eproto__INCLUDED
